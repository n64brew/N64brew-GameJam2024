diff --git a/code/game/game/game.h b/code/game/game/game.h
index f916475..72b79f1 100644
--- a/code/game/game/game.h
+++ b/code/game/game/game.h
@@ -51,9 +51,9 @@ void game_init(Game *game)
 	sound_load();
 	//
 	
-	game->countdownTimer = 150; // Oops, forget to set this
+	game->countdownTimer = 0; // Oops, forget to set this
   	game->syncPoint = 0;
-	game->state = INTRO;
+	game->state = GAMEPLAY;
 }
 
 
diff --git a/code/game/game/game_states.h b/code/game/game/game_states.h
index b5d2894..e0f1463 100644
--- a/code/game/game/game_states.h
+++ b/code/game/game/game_states.h
@@ -2,7 +2,7 @@
 #define GAME_STATES_H
 
 // Comment out to disable RSPQ Profiling
-//#define PROFILING
+#define PROFILING
 
 #ifdef PROFILING
 #include "rspq_profile.h"
@@ -283,6 +283,17 @@ void gameState_setCS(Game* game, Player* player, Actor* actor, Scenery* scenery)
 void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Scenery* scenery, ActorCollider* actor_collider, ActorContactData* actor_contact)
 {
 
+	// Debug accumulators
+	uint64_t startTime, endTime;
+	uint64_t aiTime = 0;
+	uint64_t updateTime = 0;
+	uint64_t colTime = 0;
+	uint64_t platformTime = 0;
+	uint64_t lavaTime = 0;
+	uint64_t drawTime = 0;
+
+	startTime = get_ticks();
+
 	if (!game->actorSet)
 	{
 		for (size_t i = 0; i < ACTOR_COUNT; i++) 
@@ -334,13 +345,17 @@ void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Sce
 // ======== Gameplay ======== //
 
 	// AI
-	for (size_t i = 0; i < AI_COUNT; i++)
+	uint64_t aiStart = get_ticks();
+
+	for (size_t i = 0; i < ACTOR_COUNT; i++)
 	{
-		if(player[i+PLAYER_COUNT].died) continue;
+		if(player[i].died) continue;
 		if(game->winnerSet) continue;
-		ai_generateControlData(&ai[i], &player[i+PLAYER_COUNT].control, &actor[i+PLAYER_COUNT], hexagons, game->scene.camera.offset_angle);
+		ai_generateControlData(&ai[i], &player[i].control, &actor[i], hexagons, game->scene.camera.offset_angle);
 	}
 
+	aiTime += get_ticks() - aiStart;
+
 	// Actors
 	uint8_t loserCount = 0;
 	uint8_t aliveCount = 0;
@@ -360,9 +375,13 @@ void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Sce
 				aliveCount++;
 				lastAlivePlayer = i; // Track the last alive player
 				// Update the assigned actor using its actor ID
+				uint64_t updateStart = get_ticks();
 				actor_update(currentActor, &player[i].control, &game->timing, game->scene.camera.angle_around_barycenter, game->scene.camera.offset_angle, &game->syncPoint);
+				updateTime += get_ticks()-updateStart;
 				// Update collision data for the assigned actor
+				uint64_t colStart = get_ticks();
 				actorCollision_collidePlatforms(currentActor, &actor_contact[actorIndex], &actor_collider[actorIndex], hexagons);
+				colTime += get_ticks()-colStart;
 			}
 		} else {
 
@@ -398,13 +417,20 @@ void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Sce
 
 
 	// Platforms
+	uint64_t platformStart = get_ticks();
 	for (size_t j = 0; j < PLATFORM_COUNT; j++)
 	{
 		platform_loop(&hexagons[j], actor, game->diff);
 	}
 
+	platformTime += get_ticks()-platformStart;
+
+	uint64_t lavaStart = get_ticks();
+
 	move_lava(scenery);
 
+	lavaTime += get_ticks()-lavaStart;
+
 	// ======== Draw ======== //
 	
 	screen_clearDisplay(&game->screen);
@@ -427,10 +453,13 @@ void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Sce
 
 	t3d_frame_start(); // reset after drawing shadows
 
+	uint64_t drawStart = get_ticks();
 	actor_draw(actor);
 
 	t3d_matrix_pop(1);
 
+	drawTime += get_ticks() - drawStart;
+
 	game->syncPoint = rspq_syncpoint_new();
 
 
@@ -454,9 +483,37 @@ void gameState_setGameplay(Game* game, Player* player, AI* ai, Actor* actor, Sce
 	}
 	if(player[0].control.held.r)
 	{
-		ui_fps(game->timing.frame_rate);
+		
 		if(core_get_playercount() == 1) ui_input_display(&player[0].control);
 	}
+	ui_fps(game->timing.frame_rate);
+
+	endTime = get_ticks();
+	uint64_t totalFrameTime = endTime - startTime;
+
+    // Calculate percentages
+    float aiPercentage = (float)aiTime / totalFrameTime * 100;
+    float updatePercentage = (float)updateTime / totalFrameTime * 100;
+    float colPercentage = (float)colTime / totalFrameTime * 100;
+    float platformPercentage = (float)platformTime / totalFrameTime * 100;
+    float lavaPercentage = (float)lavaTime / totalFrameTime * 100;
+    float drawPercentage = (float)drawTime / totalFrameTime * 100;
+
+	ui_printf(
+		"CPU Timing:\n"
+		" - AI: %.2f%%\n"
+		" - Anim: %.2f%%\n"
+		" - Col: %.2f%%\n"
+		" - Obj: %.2f%%\n"
+		" - Lava: %.2f%%\n"
+		" - Draw: %.2f%%\n",
+		aiPercentage,
+		updatePercentage,
+		colPercentage,
+		platformPercentage,
+		lavaPercentage,
+		drawPercentage
+		);
 
 	rdpq_detach_show();
 	sound_update();
diff --git a/code/game/main.c b/code/game/main.c
index 862bcbf..9162ed6 100644
--- a/code/game/main.c
+++ b/code/game/main.c
@@ -8,7 +8,7 @@
 
 #define ACTOR_COUNT 4
 #define PLAYER_COUNT core_get_playercount()
-#define AI_COUNT ACTOR_COUNT - PLAYER_COUNT
+#define AI_COUNT ACTOR_COUNT
 
 #define SCENERY_COUNT 1
 #define PLATFORM_COUNT 19
@@ -90,7 +90,7 @@ void minigame_init()
     rspq_profile_start();
 #endif
 
-    display_set_fps_limit((display_get_refresh_rate() / 3) * 2); // @TODO
+    //display_set_fps_limit((display_get_refresh_rate() / 3) * 2); // @TODO
 
     // actors
     actors[S4YS] = actor_create(0, "rom:/game/s4ys.t3dm");
@@ -154,6 +154,10 @@ void minigame_loop(float dt)
 void minigame_cleanup()
 {
 
+#ifdef PROFILING
+    rspq_profile_stop();
+#endif
+
     // Step 1: Disable Frame Limiter
     display_set_fps_limit(0);
 
diff --git a/config.h b/config.h
index 5bc9ca8..06feb13 100644
--- a/config.h
+++ b/config.h
@@ -8,19 +8,19 @@
     ================================================================================================================== */
 
     // Skip asking the number of players and assume PLAYER_COUNT
-    #define SKIP_PLAYERSELECTION  0
+    #define SKIP_PLAYERSELECTION  1
 
     // The number of human players
     #define PLAYER_COUNT  1
 
     // Skip asking the AI difficulty and assume AI_DIFFICULTY
-    #define SKIP_DIFFICULTYSELECTION  0
+    #define SKIP_DIFFICULTYSELECTION  1
 
     // The difficulty of the AI. 
     #define AI_DIFFICULTY  DIFF_HARD
 
     // Skip the minigame selection and boot straight into MINIGAME_TO_TEST
-    #define SKIP_MINIGAMESELECTION  0
+    #define SKIP_MINIGAMESELECTION  1
 
     // The current minigame you want to test
     #define MINIGAME_TO_TEST  "game"
